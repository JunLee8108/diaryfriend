//
//  DateUtility.swift
//  DiaryFriend
//
//  Ïï± Ï†ÑÏ≤¥ÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî ÎÇ†Ïßú Í¥ÄÎ†® Ïú†Ìã∏Î¶¨Ìã∞
//  entry_dateÎäî date-only ÌïÑÎìúÏù¥ÎØÄÎ°ú ÏãúÍ∞ÑÎåÄ Î≥ÄÌôò ÏóÜÏù¥ Ï≤òÎ¶¨
//

import Foundation
import SwiftUI

// MARK: - ÎÇ†Ïßú Ìè¨Îß∑ÌÑ∞ ÌÜµÌï© ÌÅ¥ÎûòÏä§
class DateUtility {
    static let shared = DateUtility()
    
    private let calendar: Calendar
    private let dateFormatter: DateFormatter
    
    private init() {
        self.calendar = Calendar.current
        self.dateFormatter = DateFormatter()
        // ÏãúÍ∞ÑÎåÄ ÏÑ§Ï†ïÏùÑ ÌïòÏßÄ ÏïäÏùå - date-only ÌïÑÎìúÏù¥ÎØÄÎ°ú
        // DateFormatterÎäî Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÏãúÏä§ÌÖú ÏãúÍ∞ÑÎåÄ ÏÇ¨Ïö©
    }
    
    // MARK: - Core Date String Î≥ÄÌôò (yyyy-MM-dd)
    
    /// DateÎ•º "yyyy-MM-dd" Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
    func dateString(from date: Date) -> String {
        dateFormatter.dateFormat = "yyyy-MM-dd"
        return dateFormatter.string(from: date)
    }
    
    /// "yyyy-MM-dd" Î¨∏ÏûêÏó¥ÏùÑ DateÎ°ú Î≥ÄÌôò
    func date(from dateString: String) -> Date? {
        dateFormatter.dateFormat = "yyyy-MM-dd"
        return dateFormatter.date(from: dateString)
    }
    
    // MARK: - Month String Î≥ÄÌôò (yyyy-MM)
    
    /// DateÎ•º "yyyy-MM" Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò (DataStoreÏóêÏÑú ÏÇ¨Ïö©)
    func monthKey(from date: Date) -> String {
        dateFormatter.dateFormat = "yyyy-MM"
        return dateFormatter.string(from: date)
    }
    
    /// "yyyy-MM" Î¨∏ÏûêÏó¥ÏùÑ DateÎ°ú Î≥ÄÌôò
    func date(fromMonthKey monthKey: String) -> Date? {
        dateFormatter.dateFormat = "yyyy-MM"
        return dateFormatter.date(from: monthKey)
    }
    
    // MARK: - Display Components (ÌëúÏãúÏö© Ïª¥Ìè¨ÎÑåÌä∏)
    
    /// Ïùº(day) Ïà´ÏûêÎßå Ï∂îÏ∂ú (Ïòà: "05", "31")
    func dayNumber(from dateString: String) -> String {
        guard let date = self.date(from: dateString) else { return "" }
        let day = calendar.component(.day, from: date)
        return String(format: "%02d", day)
    }
    
    /// Ïõî ÏßßÏùÄ Ïù¥Î¶Ñ Ï∂îÏ∂ú (Ïòà: "Jan", "Feb", "Mar")
    func monthShortName(from dateString: String) -> String {
        guard let date = self.date(from: dateString) else { return "" }
        dateFormatter.dateFormat = "MMM"
        return dateFormatter.string(from: date)
    }
    
    /// Ïõî Ï†ÑÏ≤¥ Ïù¥Î¶Ñ Ï∂îÏ∂ú (Ïòà: "January", "February")
    func monthFullName(from dateString: String) -> String {
        guard let date = self.date(from: dateString) else { return "" }
        dateFormatter.dateFormat = "MMMM"
        return dateFormatter.string(from: date)
    }
    
    /// ÎÖÑÎèÑ Ï∂îÏ∂ú (Ïòà: "2025")
    func year(from dateString: String) -> String {
        guard let date = self.date(from: dateString) else { return "" }
        dateFormatter.dateFormat = "yyyy"
        return dateFormatter.string(from: date)
    }
    
    /// ÏöîÏùº ÏßßÏùÄ Ïù¥Î¶Ñ (Ïòà: "Mon", "Tue")
    func weekdayShort(from dateString: String) -> String {
        guard let date = self.date(from: dateString) else { return "" }
        dateFormatter.dateFormat = "EEE"
        return dateFormatter.string(from: date)
    }
    
    /// ÏöîÏùº Ï†ÑÏ≤¥ Ïù¥Î¶Ñ (Ïòà: "Monday", "Tuesday")
    func weekdayFull(from dateString: String) -> String {
        guard let date = self.date(from: dateString) else { return "" }
        dateFormatter.dateFormat = "EEEE"
        return dateFormatter.string(from: date)
    }
    
    // MARK: - Formatted Display Strings (Ï°∞Ìï©Îêú ÌëúÏãú Î¨∏ÏûêÏó¥)
    
    /// "MMM d, yyyy" ÌòïÏãù (Ïòà: "Sep 17, 2025")
    func displayDate(from dateString: String) -> String {
        guard let date = self.date(from: dateString) else { return dateString }
        dateFormatter.dateFormat = "MMM d, yyyy"
        return dateFormatter.string(from: date)
    }
    
    /// "MMM yyyy" ÌòïÏãù (Ïòà: "Sep 2025")
    func monthYear(from dateString: String) -> String {
        guard let date = self.date(from: dateString) else { return "" }
        dateFormatter.dateFormat = "MMM yyyy"
        return dateFormatter.string(from: date)
    }
    
    /// "MMMM yyyy" ÌòïÏãù (Ïòà: "September 2025")
    func monthYearFull(from dateString: String) -> String {
        guard let date = self.date(from: dateString) else { return "" }
        dateFormatter.dateFormat = "MMMM yyyy"
        return dateFormatter.string(from: date)
    }
    
    // MARK: - Date from Date String (Date Í∞ùÏ≤¥ Î∞òÌôò)
    
    /// "MMM yyyy" ÌòïÏãùÏóêÏÑú Date Î∞òÌôò (Ï∫òÎ¶∞Îçî Ìó§ÎçîÏö©)
    func monthYear(from date: Date) -> String {
        dateFormatter.dateFormat = "MMM yyyy"
        return dateFormatter.string(from: date)
    }
    
    // MARK: - Date Range Helpers (ÎÇ†Ïßú Î≤îÏúÑ Ìó¨Ìçº)
    
    /// Ìï¥Îãπ ÏõîÏùò ÏãúÏûëÏùº
    func startOfMonth(for date: Date) -> Date? {
        let components = calendar.dateComponents([.year, .month], from: date)
        return calendar.date(from: components)
    }
    
    /// Ìï¥Îãπ ÏõîÏùò ÎßàÏßÄÎßâÏùº
    func endOfMonth(for date: Date) -> Date? {
        guard let startOfMonth = startOfMonth(for: date) else { return nil }
        return calendar.date(byAdding: DateComponents(month: 1, day: -1), to: startOfMonth)
    }
    
    // MARK: - Comparison Helpers
    
    /// Îëê ÎÇ†Ïßú Î¨∏ÏûêÏó¥Ïù¥ Í∞ôÏùÄ ÎÇ†Ïù∏ÏßÄ ÌôïÏù∏
    func isSameDay(_ dateString1: String, _ dateString2: String) -> Bool {
        return dateString1 == dateString2
    }
    
    /// ÎÇ†Ïßú Î¨∏ÏûêÏó¥Ïù¥ Ïò§ÎäòÏù∏ÏßÄ ÌôïÏù∏
    func isToday(_ dateString: String) -> Bool {
            let todayString = self.dateString(from: Date())
            return dateString == todayString
    }
    
    /// ÎÇ†Ïßú Î¨∏ÏûêÏó¥Ïù¥ ÌäπÏ†ï ÏõîÏóê ÏÜçÌïòÎäîÏßÄ ÌôïÏù∏
    func isInMonth(_ dateString: String, year: Int, month: Int) -> Bool {
        let monthPrefix = String(format: "%04d-%02d", year, month)
        return dateString.hasPrefix(monthPrefix)
    }
    
    // MARK: - Calendar Grid Helpers (Ï∫òÎ¶∞Îçî Í∑∏Î¶¨ÎìúÏö©)
    
    /// ÌäπÏ†ï ÏõîÏùò ÏùºÏàò
    func daysInMonth(year: Int, month: Int) -> Int {
        let components = DateComponents(year: year, month: month)
        guard let date = calendar.date(from: components) else { return 30 }
        return calendar.range(of: .day, in: .month, for: date)?.count ?? 30
    }
    
    /// ÌäπÏ†ï ÏõîÏùò Ï≤´ ÎÇ† ÏöîÏùº (0 = Sunday, 6 = Saturday)
    func firstWeekday(year: Int, month: Int) -> Int {
        let components = DateComponents(year: year, month: month, day: 1)
        guard let date = calendar.date(from: components) else { return 0 }
        return calendar.component(.weekday, from: date) - 1
    }
    
    /// DateÏóêÏÑú ÎÖÑ, Ïõî, Ïùº Ïª¥Ìè¨ÎÑåÌä∏ Ï∂îÏ∂ú
    func dateComponents(from date: Date) -> (year: Int, month: Int, day: Int) {
        let components = calendar.dateComponents([.year, .month, .day], from: date)
        return (
            year: components.year ?? 0,
            month: components.month ?? 0,
            day: components.day ?? 0
        )
    }
    
    /// ÎÖÑ, Ïõî, ÏùºÎ°ú Date ÏÉùÏÑ±
    func date(year: Int, month: Int, day: Int) -> Date? {
        let components = DateComponents(year: year, month: month, day: day)
        return calendar.date(from: components)
    }
    
    // MARK: - Relative Date Helpers
    
    /// NÍ∞úÏõî Ï†Ñ/ÌõÑ ÎÇ†Ïßú
    func date(byAddingMonths months: Int, to date: Date) -> Date? {
        return calendar.date(byAdding: .month, value: months, to: date)
    }
    
    /// NÏùº Ï†Ñ/ÌõÑ ÎÇ†Ïßú
    func date(byAddingDays days: Int, to date: Date) -> Date? {
        return calendar.date(byAdding: .day, value: days, to: date)
    }
    
    /// ÌòÑÏû¨ ÎÇ†Ïßú Î¨∏ÏûêÏó¥ ("yyyy-MM-dd")
    func todayString() -> String {
        return dateString(from: Date())
    }
    
    /// ÌòÑÏû¨ Ïõî Î¨∏ÏûêÏó¥ ("yyyy-MM")
    func currentMonthKey() -> String {
        return monthKey(from: Date())
    }
}

// MARK: - MoodMapper (Í∏∞Ï°¥ ÏΩîÎìú Ïû¨ÌôúÏö©)
class MoodMapper {
    static let shared = MoodMapper()
    
    private let moodData: [String: (icon: String, color: Color, label: String)] = [
        "happy": ("sun.max.fill", Color.yellow, "Happy"),
        "neutral": ("cloud", Color.gray, "Neutral"),
        "sad": ("cloud.rain.fill", Color(hex: "1CA3DE"), "Sad")
    ]
    
    private let defaultMood = ("cloud", Color.gray, "Neutral")
    
    private init() {}
    
    func icon(for mood: String?) -> String {
        guard let mood = mood?.lowercased() else {
            return defaultMood.0
        }
        return moodData[mood]?.icon ?? defaultMood.0
    }
    
    func color(for mood: String?) -> Color {
        guard let mood = mood?.lowercased() else {
            return defaultMood.1
        }
        return moodData[mood]?.color ?? defaultMood.1
    }
    
    func label(for mood: String?) -> String {
        guard let mood = mood?.lowercased() else {
            return defaultMood.2
        }
        return moodData[mood]?.label ?? defaultMood.2
    }
}

// MARK: - Debug Extension
#if DEBUG
extension DateUtility {
    /// ÌÖåÏä§Ìä∏Ïö© ÎÇ†Ïßú Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
    func testDateStrings(daysFromToday: Int...) -> [String] {
        var results: [String] = []
        for days in daysFromToday {
            if let date = date(byAddingDays: days, to: Date()) {
                results.append(dateString(from: date))
            }
        }
        return results
    }
    
    /// ÎÇ†Ïßú Ìè¨Îß∑ ÌÖåÏä§Ìä∏ Ï∂úÎ†•
    func printFormats(for dateString: String) {
        print("""
        üìÖ Date Formats for: \(dateString)
        - Day Number: \(dayNumber(from: dateString))
        - Month Short: \(monthShortName(from: dateString))
        - Month Full: \(monthFullName(from: dateString))
        - Year: \(year(from: dateString))
        - Weekday Short: \(weekdayShort(from: dateString))
        - Weekday Full: \(weekdayFull(from: dateString))
        - Display Date: \(displayDate(from: dateString))
        - Month Year: \(monthYear(from: dateString))
        - Is Today: \(isToday(dateString))
        """)
    }
}
#endif
