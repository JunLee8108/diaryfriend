//
//  LocalizationManager.swift
//  DiaryFriend
//
//  Created by Jun Lee on 10/21/25.
//

import Foundation
import Combine

class LocalizationManager: ObservableObject {
    static let shared = LocalizationManager()
    
    // ‚≠ê Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω Ïãú Î™®Îì† @Localized ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
    @Published var currentLanguage: AppLanguage = .english {
        didSet {
            loadCurrentBundle()
            Logger.debug("üåç Language changed to: \(currentLanguage.rawValue)")
        }
    }
    
    private var bundle: Bundle = Bundle.main
    private let userDefaultsKey = "app_language"
    
    private init() {
        loadCurrentBundle()
    }
    
    // MARK: - Public Methods
    
    /// Ïï± ÏãúÏûë Ïãú Ìò∏Ï∂ú: UserDefaultsÏóêÏÑú Ïñ∏Ïñ¥ Î°úÎìú
    func loadSavedLanguage() {
        if let saved = UserDefaults.standard.string(forKey: userDefaultsKey),
           let language = AppLanguage(rawValue: saved) {
            currentLanguage = language
            Logger.debug("üì± Loaded language from UserDefaults: \(language.rawValue)")
        } else {
            // ÏãúÏä§ÌÖú Ïñ∏Ïñ¥ Í∞êÏßÄ
            let systemLanguage = Locale.current.language.languageCode?.identifier ?? "en"
            currentLanguage = systemLanguage == "ko" ? .korean : .english
            Logger.debug("üåê Using system language: \(currentLanguage.rawValue)")
        }
    }
    
    /// Ïñ∏Ïñ¥ ÏÑ§Ï†ï Î∞è Ï†ÄÏû•
    func setLanguage(_ language: AppLanguage) {
        currentLanguage = language
        UserDefaults.standard.set(language.rawValue, forKey: userDefaultsKey)
        Logger.debug("üíæ Language saved: \(language.rawValue)")
    }
    
    /// UserProfileÍ≥º ÎèôÍ∏∞Ìôî
    func syncWithUserProfile() async {
        guard UserProfileStore.shared.isProfileLoaded else {
            Logger.debug("‚è≥ Profile not loaded yet, skipping sync")
            return
        }
        
        let isKorean = UserProfileStore.shared.isKoreanUser
        let profileLanguage: AppLanguage = isKorean ? .korean : .english
        
        if currentLanguage != profileLanguage {
            await MainActor.run {
                setLanguage(profileLanguage)
                Logger.debug("üîÑ Synced with UserProfile: \(profileLanguage.rawValue)")
            }
        }
    }
    
    /// Î≤àÏó≠ ÌÖçÏä§Ìä∏ Î∞òÌôò
    func localized(_ key: LocalizationKey) -> String {
        let value = NSLocalizedString(key.rawValue, bundle: bundle, comment: "")
        
        #if DEBUG
        if value == key.rawValue {
            print("‚ö†Ô∏è Missing translation: \(key.rawValue)")
        }
        #endif
        
        return value == key.rawValue ? key.fallback : value
    }
    
    // MARK: - Private Methods
    
    private func loadCurrentBundle() {
        guard let path = Bundle.main.path(forResource: currentLanguage.code, ofType: "lproj"),
              let bundle = Bundle(path: path) else {
            self.bundle = Bundle.main
            Logger.debug("‚ö†Ô∏è Failed to load bundle for \(currentLanguage.code)")
            return
        }
        self.bundle = bundle
        Logger.debug("‚úÖ Loaded language bundle: \(currentLanguage.code)")
    }
}

// MARK: - Supporting Types

enum AppLanguage: String, CaseIterable, Codable {
    case english = "English"
    case korean = "Korean"
    
    var code: String {
        switch self {
        case .english: return "en"
        case .korean: return "ko"
        }
    }
    
    var displayName: String {
        switch self {
        case .english: return "English"
        case .korean: return "ÌïúÍµ≠Ïñ¥"
        }
    }
}
